from datetime import datetime
import aiosqlite
import csv
import asyncio


def format_datetime(input_datetime_str) -> str:
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –º–µ—Å—è—Ü–∞ –≤ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
    month_names = {
        1: '—è–Ω–≤–∞—Ä—è',
        2: '—Ñ–µ–≤—Ä–∞–ª—è',
        3: '–º–∞—Ä—Ç–∞',
        4: '–∞–ø—Ä–µ–ª—è',
        5: '–º–∞—è',
        6: '–∏—é–Ω—è',
        7: '–∏—é–ª—è',
        8: '–∞–≤–≥—É—Å—Ç–∞',
        9: 'sep',
        10: 'oct',
        11: 'nov',
        12: 'dec'
    }

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º –≤ –æ–±—ä–µ–∫—Ç datetime
    input_datetime = datetime.strptime(input_datetime_str, '%Y-%m-%d %H:%M:%S')

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–Ω—å, –º–µ—Å—è—Ü –∏ –≤—Ä–µ–º—è
    day = input_datetime.day
    month = input_datetime.month
    time = input_datetime.strftime('%H:%M')

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –º–µ—Å—è—Ü
    formatted_date = f"{day} {month_names[month]}"

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
    formatted_datetime = f"{formatted_date} –≤ {time}"
    return formatted_datetime


def refactor_category(category):
    if category == 'üçü M–∞–∫':
        return 'vit'
    elif category == 'üêî KFC':
        return 'kfc'
    elif category == 'üçî –ë–ö':
        return 'bk'
    elif category == 'üçïü•¶ü•û –î—Ä—É–≥–æ–µ':
        return 'other'
    else:
        raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")


def reverse_refactor_category(category):
    if category == 'vit':
        return 'üçü M–∞–∫'
    elif category == 'kfc':
        return 'üêî KFC'
    elif category == 'bk':
        return 'üçî –ë–ö'
    elif category == 'other':
        return 'üçïü•¶ü•û –î—Ä—É–≥–æ–µ'
    else:
        raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")


async def transactions_to_list(transactions) -> list:
    new_transactions = []
    for transaction in transactions:
        new_transactions.append(
            [transaction[0], reverse_refactor_category(transaction[2]), transaction[3],
             format_datetime(transaction[4])])
    new_transactions.reverse()
    return new_transactions


def is_number(value):
    try:
        float(value)
        return True
    except ValueError:
        return False


async def transaction_to_inline(transactions) -> list:
    inline_buttons_list = []
    for transaction in transactions:
        inline_buttons_list.append(
            f' {transaction[2]} ‚ÇΩ |'
            f' {transaction[1]} |'
            f' {transaction[3]}')
    return inline_buttons_list


async def export_table_to_csv(table_name, csv_file_path):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect('db.db') as db:
        # –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        async with db.execute(f"SELECT * FROM {table_name}") as cursor:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
            column_names = [description[0] for description in cursor.description]

            # –û—Ç–∫—Ä—ã—Ç–∏–µ CSV-—Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
            with open(csv_file_path, 'w', newline='', encoding='utf-8') as csv_file:
                writer = csv.writer(csv_file)

                # –ó–∞–ø–∏—Å—å –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤
                writer.writerow(column_names)

                # –ó–∞–ø–∏—Å—å —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
                async for row in cursor:
                    writer.writerow(row)
