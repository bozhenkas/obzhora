import logging
import yaml
import os
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from typing import List, Dict, Any
from utils import get_non_voters_from_vk
from keyboards.for_polls import get_departments_kb, get_polls_pagination_kb, PollsCallback
from keyboards.for_choice import get_choice_kb
from filters.curator_filter import CuratorFilter
from states import PollsForm

router = Router()

dir_path = os.path.dirname(os.path.realpath(__file__))
yaml_path = os.path.join(dir_path, '..', 'messages.yaml')
with open(yaml_path, 'r', encoding='utf-8') as file:
    MESSAGES = yaml.safe_load(file)

ACTIONS = {
    "–û–±—â–∞—è": "general", "–¢—ã–Ω—Ü—ã": "dance", "–ú—É–∑—ã–∫–∞": "music",
    "–°—Ü–µ–Ω–∞—Ä–Ω—ã–π –æ—Ç–¥–µ–ª": "script", "–î–µ–∫–æ—Ä–∞—Ü–∏–∏": "decorations", "–ú–µ–¥–∏–∞-–æ—Ç–¥–µ–ª": "media"
}


async def _get_poll_page_content(polls_data: List[Dict[str, Any]], page: int) -> tuple[str, types.InlineKeyboardMarkup]:
    current_poll = polls_data[page]
    total_pages = len(polls_data)
    text = ""
    if current_poll.get("error") == "tech_account_not_voted":
        text_template = MESSAGES['poll_tech_account_error_text']
        text = text_template.format(poll_question=current_poll["question"], current_page=page + 1,
                                    total_pages=total_pages)
    else:
        if current_poll.get("students_non_voters_links") == "–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.":
            text_template = MESSAGES['poll_no_students_text']
        else:
            text_template = MESSAGES['poll_result_text']
        text = text_template.format(
            poll_question=current_poll.get("question", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"), current_page=page + 1, total_pages=total_pages,
            total_non_voters=current_poll.get("total_non_voters", 0),
            curators_non_voters_count=current_poll.get("curators_non_voters_count", 0),
            students_non_voters_links=current_poll.get("students_non_voters_links", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        )
    keyboard = get_polls_pagination_kb(polls_data, page)
    return text, keyboard


@router.message(Command("polls"), CuratorFilter())
async def cmd_polls(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(PollsForm.waiting_for_department)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª:", reply_markup=get_departments_kb())


@router.message(PollsForm.waiting_for_department, F.text.in_(ACTIONS))
async def process_department_selection(message: types.Message, state: FSMContext):
    msg = await message.answer("–°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∏—â—É –æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–≤–µ—Ä—è—é —Ç–µ—Ö. –∞–∫–∫–∞—É–Ω—Ç...")
    polls_data = await get_non_voters_from_vk(ACTIONS[message.text])
    if not polls_data:
        await msg.edit_text(
            f'üéâ –í—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤–æ –≤—Å–µ—Ö –æ–ø—Ä–æ—Å–∞—Ö –æ—Ç–¥–µ–ª–∞ <b>"{message.text}"</b>, –ª–∏–±–æ –æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!')
        await state.clear()
        return

    logging.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–ø—Ä–æ—Å–∞–º. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ä–æ—Å–æ–≤: {len(polls_data)}")
    await state.update_data(polls=polls_data, department_name=message.text)
    await state.set_state(PollsForm.viewing_polls)

    text, keyboard = await _get_poll_page_content(polls_data, page=0)
    await msg.edit_text(text, reply_markup=keyboard)


@router.message(PollsForm.waiting_for_department, F.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
async def process_back_from_polls_choice(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", reply_markup=get_choice_kb())


@router.message(PollsForm.waiting_for_department)
async def process_unknown_department(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–¥–µ–ª —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")


@router.callback_query(PollsCallback.filter(F.action.in_(["prev", "next"])))
async def navigate_polls_callback(callback: types.CallbackQuery, callback_data: PollsCallback, state: FSMContext):
    logging.info("--- –°–†–ê–ë–û–¢–ê–õ –•–≠–ù–î–õ–ï–† –ü–ê–ì–ò–ù–ê–¶–ò–ò (–ë–ï–ó –ü–†–û–í–ï–†–ö–ò –°–û–°–¢–û–Ø–ù–ò–Ø) ---")
    logging.info(f"–ü–æ–ª—É—á–µ–Ω callback: action='{callback_data.action}', page='{callback_data.page}'")

    await callback.answer()

    fsm_data = await state.get_data()
    logging.info(f"–î–∞–Ω–Ω—ã–µ –∏–∑ FSM (—Å–æ—Å—Ç–æ—è–Ω–∏—è): {fsm_data}")

    polls_data = fsm_data.get("polls", [])

    if not polls_data:
        logging.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ 'polls' –≤ FSM –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    logging.info(f"–£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(polls_data)} –æ–ø—Ä–æ—Å–æ–≤ –∏–∑ FSM.")
    page = callback_data.page
    total_pages = len(polls_data)

    if not 0 <= page < total_pages:
        logging.warning(f"–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã. page={page}, total_pages={total_pages}")
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    logging.info(f"–§–æ—Ä–º–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1}/{total_pages}")
    text, keyboard = await _get_poll_page_content(polls_data, page)

    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1}")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ.")
    logging.info("--- –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò –ü–ê–ì–ò–ù–ê–¶–ò–ò ---\n")


@router.callback_query(PollsCallback.filter(F.action == "close"))
async def close_polls_view_callback(callback: types.CallbackQuery, state: FSMContext):
    logging.info("--- –°–†–ê–ë–û–¢–ê–õ –•–≠–ù–î–õ–ï–† –ó–ê–ö–†–´–¢–ò–Ø (–ë–ï–ó –ü–†–û–í–ï–†–ö–ò –°–û–°–¢–û–Ø–ù–ò–Ø) ---")
    await callback.answer("–ó–∞–∫—Ä—ã—Ç–æ.")
    await callback.message.delete()
    await state.clear()
