# src/handlers/admin/polls.py

import yaml
import os
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from typing import List, Dict, Any

from utils import get_non_voters_from_vk
from keyboards.for_polls import get_departments_kb, get_polls_pagination_kb, PollsCallback
from keyboards.for_choice import get_choice_kb
from filters.curator_filter import CuratorFilter
from states import PollsForm

router = Router()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤
dir_path = os.path.dirname(os.path.realpath(__file__))
yaml_path = os.path.join(dir_path, '..', 'messages.yaml')
with open(yaml_path, 'r', encoding='utf-8') as file:
    MESSAGES = yaml.safe_load(file)

ACTIONS = {
    "–û–±—â–∞—è": "general",
    "–¢—ã–Ω—Ü—ã": "dance",
    "–ú—É–∑—ã–∫–∞": "music",
    "–°—Ü–µ–Ω–∞—Ä–Ω—ã–π –æ—Ç–¥–µ–ª": "script",
    "–î–µ–∫–æ—Ä–∞—Ü–∏–∏": "decorations",
    "–ú–µ–¥–∏–∞-–æ—Ç–¥–µ–ª": "media"
}


async def _get_poll_page_content(polls_data: List[Dict[str, Any]], page: int) -> tuple[str, types.InlineKeyboardMarkup]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    current_poll = polls_data[page]
    total_pages = len(polls_data)
    text = ""

    if current_poll.get("error") == "tech_account_not_voted":
        text_template = MESSAGES['poll_tech_account_error_text']
        text = text_template.format(
            poll_question=current_poll["question"],
            current_page=page + 1,
            total_pages=total_pages
        )
    else:
        if current_poll.get("students_non_voters_links") == "–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.":
            text_template = MESSAGES['poll_no_students_text']
        else:
            text_template = MESSAGES['poll_result_text']

        text = text_template.format(
            poll_question=current_poll.get("question", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
            current_page=page + 1,
            total_pages=total_pages,
            total_non_voters=current_poll.get("total_non_voters", 0),
            curators_non_voters_count=current_poll.get("curators_non_voters_count", 0),
            students_non_voters_links=current_poll.get("students_non_voters_links", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        )

    keyboard = get_polls_pagination_kb(polls_data, page)
    return text, keyboard


@router.message(Command("polls"), CuratorFilter())
async def cmd_polls(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(PollsForm.waiting_for_department)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª:", reply_markup=get_departments_kb())


@router.message(PollsForm.waiting_for_department, F.text.in_(ACTIONS))
async def process_department_selection(message: types.Message, state: FSMContext):
    msg = await message.answer("–°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∏—â—É –æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–≤–µ—Ä—è—é —Ç–µ—Ö. –∞–∫–∫–∞—É–Ω—Ç...")

    polls_data = await get_non_voters_from_vk(ACTIONS[message.text])

    if not polls_data:
        await msg.edit_text(
            f'üéâ –í—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤–æ –≤—Å–µ—Ö –æ–ø—Ä–æ—Å–∞—Ö –æ—Ç–¥–µ–ª–∞ <b>"{message.text}"</b>, –ª–∏–±–æ –æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!')
        await state.clear()
        return

    await state.update_data(polls=polls_data, department_name=message.text)
    await state.set_state(PollsForm.viewing_polls)

    text, keyboard = await _get_poll_page_content(polls_data, page=0)
    await msg.edit_text(text, reply_markup=keyboard)


@router.message(PollsForm.waiting_for_department, F.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
async def process_back_from_polls_choice(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", reply_markup=get_choice_kb())


@router.message(PollsForm.waiting_for_department)
async def process_unknown_department(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–¥–µ–ª —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")


# --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
@router.callback_query(PollsCallback.filter(F.action.in_(["prev", "next"])), PollsForm.viewing_polls)
async def navigate_polls_callback(callback: types.CallbackQuery, callback_data: PollsCallback, state: FSMContext):
    # 1. –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫ –°–†–ê–ó–£, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "–∑–∞–≥—Ä—É–∑–∫—É" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await callback.answer()

    fsm_data = await state.get_data()
    polls_data = fsm_data.get("polls", [])

    if not polls_data:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    page = callback_data.page

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    if not 0 <= page < len(polls_data):
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    text, keyboard = await _get_poll_page_content(polls_data, page)

    # 2. –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ try-except, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª
    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        # –≠—Ç–∞ –æ—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        # –ú–æ–∂–Ω–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ.")


# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---


@router.callback_query(PollsCallback.filter(F.action == "close"), PollsForm.viewing_polls)
async def close_polls_view_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.clear()
    await callback.answer("–ó–∞–∫—Ä—ã—Ç–æ.")
